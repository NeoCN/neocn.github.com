<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Oracle | DevX.Me]]></title>
  <link href="http://NeoCN.github.com//categories/oracle/atom.xml" rel="self"/>
  <link href="http://NeoCN.github.com/"/>
  <updated>2012-12-01T18:51:47+08:00</updated>
  <id>http://NeoCN.github.com/</id>
  <author>
    <name><![CDATA[小马]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Oracle中使用to_char获取周次]]></title>
    <link href="http://NeoCN.github.com/Oracle/oracle-to_char-week-of-year.html"/>
    <updated>2010-05-08T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/Oracle/oracle-to_char-week-of-year</id>
    <content type="html"><![CDATA[<p>昨天，照惯例统计了移动系统的访问情况，也没仔细看就提交给移动方面了，大概20分钟后，移动那边的负责人电话就过来了：
<pre>移动负责人：你统计的是什么时候的访问情况？
我：本周啊！
移动负责人：这结果不对啊，我怎么可能本周只访问过2个系统而且只有一次呢？
           我自己记得就有很多次了，也绝对不止2个系统！
我：……这样啊，不好意思，我检查下看……</pre>
统计系统访问情况的脚本是我写的，用它统计都有半年多了，这是第一次客户提出质疑；以前自己发现过结果不太对劲，但认为是正常浮动，没管它……</p>




<p>仔细检查了下脚本，统计本周访问情况，选择条件中关于时间判断是这样写的：to_char(create_date,'ww') = to_char(sysdate,'ww')，难道是这里有问题？</p>




<p>先做做测试看看：
<pre lang="sql">select to_char(to_date('2010-5-6','yyyy-mm-dd'),'ww') from dual;               --结果是18
select t0_char(to_date('2010-5-7','yyyy-mm-dd'),'ww') from dual;               --结果是19</pre>
汗……统计本周访问情况应是统计2010-5-3～2010-5-7 ，但是，使用to_char函数的ww参数获取周数，5.6和5.7都不在一个值上，这哪里能统计出正确结果呢……暴寒……</p>




<p><strong>问题原因</strong>：
<pre>WW参数：一年中的周次（1～53），第一周为一年的第一天至第七天；
IW参数：一年中的周次（1～52或1～53），基于ISO标准；</pre>
而我们平时所说的某一周是第几周，基本都是指自然周的周次，也就是基于ISO标准的周次，我的统计脚本里却用WW，太汗了……基础知识啊，需要恶补……半年多了啊，今天才知道……呃！！！这半年多的统计数据有多少是对的呢？不敢想！罪过啊罪过</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oracle EXP-00003 异常解决办法]]></title>
    <link href="http://NeoCN.github.com/DataBase/Oracle/oracle-exp-00003-solutions.html"/>
    <updated>2010-01-12T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/DataBase/Oracle/oracle-exp-00003-solutions</id>
    <content type="html"><![CDATA[<p>今天下午，想在测试环境下进行数据库迁移的模拟测试，本机Oracle 版本为9.2.0.1 ，服务器Oracle版本为9.2.0.8 ，在使用EXP命令进行用户数据导出时，如果表中有数据类型是Lob的列，则会出现EXP-00003：未找到段×××的存储定义(EXP-00003 : no storage definition found for segment .....)。</p>




<p>出现 EXP-00003异常，是Oracle数据库的一个Bug。当使用低版本的EXP从高版本(9.2.0.5或者更高)去导出含有Lob列的表的时候，就会遇到EXP-00003异常。</p>




<p>为了解决这个问题，可以选择升级客户端，将客户端EXP升级到较高版本，可以解决这个Bug；当然有些人不想这么麻烦，那么可以用下面的临时解决方案(替换视图"exu9tne")：
<p style="text-align: left;">EXP导出前，在SYS用户下执行下面的SQL：</p></p>




<p><pre lang="sql">CREATE OR REPLACE VIEW exu9tne (
tsno, fileno, blockno, length) AS
SELECT ts#, segfile#, segblock#, length
FROM sys.uet$
WHERE ext# = 1
UNION ALL
SELECT * FROM SYS.EXU9TNEB
/
</pre>
<p style="text-align: left;">EXP导出完成后，执行下面的SQL恢复视图定义(Metalink建议)：</p></p>




<p><pre lang="sql">CREATE OR REPLACE VIEW exu9tne (
tsno, fileno, blockno, length) AS
SELECT ts#, segfile#, segblock#, length
FROM sys.uet$
WHERE ext# = 1
/
</pre>
PS: 下午升级数据库后，服务起不来了，自己又是菜鸟一个，折腾N久还是不行，最后一狠心，重装……唉，可怜了我辛辛苦苦导进去的数据……</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PL SQL Developer v8.0.0.1480 KeyMaker]]></title>
    <link href="http://NeoCN.github.com/Oracle/pl-sql-developer-v8-keymaker.html"/>
    <updated>2009-11-11T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/Oracle/pl-sql-developer-v8-keymaker</id>
    <content type="html"><![CDATA[<p>晚上下班回家，整理桌面上的软件，发现9月份下载的 PL SQL Developer v8 还在那里，当时因为没法注册，丢在那里没管它，今天Google一搜，不错，ZWT小组已经放出了注册机了，并且很有意思的是，注册机中的图片是庆祝建国60周年相关的。ZWT小组的破解功力果然深厚。<img title="PLSQL Developer KeyMaker" src="https://dl.dropbox.com/u/46811550/images/PLSQL-Developer-KeyMaker.PNG" alt="PLSQL Developer KeyMaker" width="407" height="372" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Weblogic 10.3 连接 Oracle 8i]]></title>
    <link href="http://NeoCN.github.com/Application Server/Oracle/weblogic10-3-connect-to-oracle8i.html"/>
    <updated>2009-08-14T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/Application Server/Oracle/weblogic10-3-connect-to-oracle8i</id>
    <content type="html"><![CDATA[<p>最近做一个项目与统一接入的集成，修改完配置文件后，需要部署到正式环境中去，应用服务器是WebLogic 10.3，在新建JNDI数据源的时候无法建立成功，出现如下错误：</p>




<p>java.lang.ArrayIndexOutOfBoundsException: 4</p>




<p>数组下标越界？很是让人摸不着头脑，这建数据源跟数组下标越界有什么关系？？？</p>




<p>数据库的版本是Oracle 8i，经过查找资料，发现问题的根源是WebLogic 10.3不再支持Oracle 8i。</p>




<p>WebLogic 10.3所支持的数据库：<br /><a title="http://download.oracle.com/docs/cd/E13196_01/platform/suppconfigs/configs103/103_over/supported_db.html#1179245" href="http://download.oracle.com/docs/cd/E13196_01/platform/suppconfigs/configs103/103_over/supported_db.html#1179245" target="_blank">http://download.oracle.com/docs/cd/E13196_01/platform/suppconfigs/configs103/103_over/supported_db.html#1179245</a></p>




<p>目前暂时没有解决办法，只能升级Oracle数据库，或者，如果是付费用户的话可寻求官方技术支持！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译] PL/SQL 格式化指南 (PL/SQL Formatting Guide)]]></title>
    <link href="http://NeoCN.github.com/Oracle/plsql-formatting-guide.html"/>
    <updated>2009-07-23T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/Oracle/plsql-formatting-guide</id>
    <content type="html"><![CDATA[<p>最近一直在修改以前同事写的Oracle存储过程，由于编码不规范，修改起来相当费神，于是乎，翻译了这篇 PL/SQL Formatting Guide （Oracle PL/ SQL by Example，Appendix A），费了九牛二虎之力，终于翻译完了，也终于知道自己的英语有多烂了，呜呜。</p>




<p>声明：原创翻译，不足之处请多多指正，转载请注明出处！</p>




<p><strong>一、大小写</strong><strong> </strong></p>




<p>就像在SQL中一样，PL / SQL中是不区分大小写的。其一般准则如下：
<ul>
    <li>关键字(BEGIN, EXCEPTION, END, IF THEN ELSE,LOOP, END LOOP)、数据类型(VARCHAR2, NUMBER)、内部函数(LEAST, SUBSTR)和用户定义的子程序(procedures, functions,packages)，使用大写。</li>
    <li>变量名以及SQL中的列名和表名，使用小写。<!--more--></li>
</ul>
<strong>二、空白</strong><strong> </strong>
<p align="left">空白（空行和空格）在PL/SQL中如同在SQL中一样重要，因为它是提高代码可读性的一个重要因素。换句话说，可以通过在代码中使用缩进来体现程序的逻辑结构。以下是一些建议：</p></p>




<p><ul>
    <li>在等号或比较操作符的左右各留一个空格；</li>
    <li>结构词（DECLARE, BEGIN, EXCEPTION, END,IF 和 END IF, LOOP 和 END LOOP）居左排列。另外，结构中的嵌套结构要缩进三个空格（使用空格键，而不是Tab键）；</li>
    <li>主要代码段之间用空行隔开；</li>
    <li>把同一结构的不同逻辑部分分开写在独立的行，即使这个结构很短。例如，IF和THEN被放在同一行，而ELSE 和END IF则放在独立的行。</li>
</ul>
<p align="left"><strong>三、命名约定</strong><strong> </strong></p>
<p align="left">使用以下前缀对于避免与关键字和表名列名相冲突是很有帮助的：</p></p>




<p><ul>
    <li>v_变量名</li>
    <li>con_常量名</li>
    <li>i_输入参数名，o_输出参数名，io_输入输出参数名</li>
    <li>c_游标名 或者 游标名_cur</li>
    <li>rc_<em> Ref Cursor</em>名</li>
    <li>r_<em>Record</em>名 或者 <em>Record</em>名_rec</li>
    <li>FOR r_stud IN c_stud LOOP...</li>
    <li>FOR stud_rec IN stud_cur LOOP</li>
    <li>type_名称，名称_type (用户定义的类型)</li>
    <li>t_表名，表名_tab （PL/SQL 表）</li>
    <li>rec_<em>Record</em>名，<em>Record</em>名_rec （<em>Record</em>变量）</li>
    <li>e_异常名 （用户定义的异常）</li>
</ul>
<p align="left">包的名称应该描述包内的存储过程和函数主要所完成的功能</p>
<p align="left">存储过程的名称应该描述该存储过程所执行的动作</p>
<p align="left">函数的名称应该描述所返回的变量</p>
<p align="left">例如：</p>
<p align="left"></p></p>




<p><pre lang="plsql">PACKAGE student_admin
-- admin 后缀可能是用于表示管理功能.
PROCEDURE remove_student (i_student_id IN student.studid%TYPE);</pre></p>




<p>FUNCTION student_enroll_count (i_student_id student.studid%TYPE)<br />
RETURN INTEGER;
<p align="left"><strong>四、注释</strong></p>
<p align="left">PL/SQL中的注释如同SQL中的注释一样重要。他们应该解释程序的主要部分和所有关键的逻辑步骤。</p>
<p align="left">使用单行注释(--)而不是多行注释(/*)。即使PL/SQL对这些注释做同样处理，这样在代码完成后进行调试也会容易些，因为你不能在多行注释中嵌入多行注释。换句话说，单行注释代码中可以部分取消注释，而在多行注释代码中则不行。</p>
<p align="left"><strong>五、其他的建议</strong></p>
<p align="left">对于PL/SQL中嵌入的SQL声明，使用相同的格式化指南来决定这些声明应该如何在代码块中出现</p>
<p align="left">提供一个头部注释，用于说明代码块的用途并列出创建日期和作者名字。并且每个修订版都要有一行注释，包含作者名、日期和修订版描述。</p>
<p align="left">例如：下面的这个示例体现了上述建议。请注意该示例还使用了等宽字体（Courier New），因为每个字体占据同等宽度可以使格式化更加简便。等比例空格字体会隐藏空格使得行间对齐比较困难。多数文本和程序编辑器默认使用等宽字体。</p></p>




<p>
<script src="https://gist.github.com/4181293.js"> </script>
</p>

]]></content>
  </entry>
  
</feed>
