<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | DevX.Me]]></title>
  <link href="http://NeoCN.github.com//categories/jquery/atom.xml" rel="self"/>
  <link href="http://NeoCN.github.com/"/>
  <updated>2012-12-01T18:10:13+08:00</updated>
  <id>http://NeoCN.github.com/</id>
  <author>
    <name><![CDATA[小马]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery小贴士]]></title>
    <link href="http://NeoCN.github.com/jQuery/jquery-tips.html"/>
    <updated>2009-07-31T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/jQuery/jquery-tips</id>
    <content type="html"><![CDATA[<p>本文译自：<a title="Things you may not know about jQuery" href="http://james.padolsey.com/javascript/things-you-may-not-know-about-jquery/" target="_blank">http://james.padolsey.com/javascript/things-you-may-not-know-about-jquery/</a></p>




<p>声明：原创翻译，不当之处还请多多指正，转载请注明出处。
<ul>
    <li> $.fn仅仅是jQuery.prototype 的一个快捷方式。</li>
    <li> 您可以通过尝试访问jQuery集合的第一个元素来测试jQuery集合是否包含某些内容，例如： if($(selector)[0]){…} 。</li>
    <li> jQuery在所有浏览器中标准化了事件对象！可以到这里查看所有可用的属性/方法： http://docs.jquery.com/Events/jQuery.Event 。</li>
    <li> 当您创建一个插件时，您可以使用的jQuery的链式调用访问前面的对象：</li><!--more-->
</ul>
<pre lang="javascript">
      jQuery.fn.doSomething = function() {
          this; // => $('a')
          this.prevObject; // => $('li')
          // 记得在你的插件中使用链式代码
          return this;
      };
       
      jQuery('li').show().find('a').doSomething();
       
      // 你甚至可以从创建一个新的“根”插件:
      // (返回这个链的“根”)
      jQuery.fn.root = function() {
          // 根永远都是Document所以我们不得不
          // 回到最后一个的前一个：
          var root = this;
          while(root.prevObject.prevObject) {
              root = root.prevObject;
          }
          return root;
      };
       
      $('li').find('a').children().root(); // <= $('li') 被返回
      //在这种情况下使用root()与使用end()是一样的
</pre>
<ul>
    <li> 您可以对事件应用命名空间！这对于插件开发是特别有用的：</li>
</ul>
<pre lang="javascript">
      jQuery.fn.myPlugin = function() {
          //自己做一些清理 
          jQuery.myPlugin = {
              cleanUp: function() {
                  // 该插件的作用是移除所有已绑定的click事件处理器
                  jQuery('*').unbind('click.myPlugin'); 
                  //或者，删除所有事件：
                  jQuery('*').unbind('.myPlugin');
              }
          };
          return this.bind('click.myPlugin', function() {
              //做些什么...
          });
      };

      //请注意，您也可以为数据定义命名空间：
      // 例如. $(elem).data('whatever.myPlugin',value);
</pre>
<ul>
    <li> 您可以通过jQuery的事件存储机制访问所有绑定到一个元素（或任何对象）的所有事件处理器：</li>
</ul>
<pre lang="javascript">
      //列表已绑定的事件：
      console.dir( jQuery('#elem').data('events') ); 
      //记录所有事件的处理程序：
      jQuery.each($('#elem').data('events'), function(i, event){
          jQuery.each(event, function(i, handler){
              console.log( handler.toString() );
          });
      }); 
      //你可以看到某个事件发生时真正执行的方法，
      //对调试非常有用！
</pre>

<p><ul>
    <li> jQuery原生支持JSONP （'JSON with padding'），它实际上意味着可以做跨域“Ajax”请求（虽然严格意义上来讲并不是Ajax，因为它没有使用XHR ）。JSONP需要被请求域必须有一些相应的JSONP的API（它必须能够封装JSON数据与指定的回调函数）。一个例子：</li>
</ul>
<pre lang="javascript">
      function getLatestFlickrPics(tag,callback) {
          var flickrFeed = 'http://api.flickr.com/services/feeds/photos_public.gne?tags='
                         + tag + '&tagmode=any&format=json&jsoncallback=?';
          jQuery.getJSON(flickrFeed, callback);
      }
       
      //用法
      getLatestFlickrPics('ferrari', function(data){
          jQuery.each(data.items, function(i, item){
              $("</pre><img />").attr("src", item.media.m).appendTo('body');
          });
      });
</pre>
<ul>
    <li> 您可能会发现它有点混乱，但jQuery使我们能够在一个链式代码中建立一个完整的DOM结构：</li>
</ul>
<pre lang="javascript">
      //创建或注入一个链：
      jQuery('<div>')
          .append('<p><a href="#">Foo</a></p>')
          .find('p a')
              .click(function(){
                  // 做些什么...
                  return false;
              })
              .end()
          .append('<p><a href="#">Bar</a></p>')
          .find('p:eq(1) a')
              .click(function(){
                  //做些别的事情...
                  return false;
              })
              .end()
          .appendTo('body');
</pre>

<ul>
    <li> 访问一个jQuery集合内部的DOM元素是非常简单的：</li>
</ul>
<pre lang="javascript">
     var HTMLCollection = $('div').get();

      //或者，如果您只想获取第一个元素：
      $('div').get(0);
      $('div').get()[0];
      $('div')[0];
</pre>
<ul>
    <li> 您不仅可以绑定事件到DOM元素;您也可以绑定一个自定义事件到任何对象！</li>
</ul>
<pre lang="javascript">
      function Widget() {
          //做些什么...
      };

      var myPhotoWidget = new Widget('photos'); 
      var myPhotoWidget = new Widget('photos'); 
      jQuery(myPhotoWidget).bind('photoAdd', function() {
            //自定义的事件处理...
      });
      //触发事件：
      jQuery(myPhotoWidget).trigger('photoAdd');
</pre>
<ul>
    <li> 获取所选中的元素的索引值是非常容易的， jQuery给我们提供了一个'index'方法：</li>
</ul>
<pre lang="javascript">
    $('table tr').click(function(){
       //查找点击的表格行索引：
       var index = $('table tr').index(this);
    });
</pre>
<ul>
    <li> 您可以创建自己的过滤选择器。下面是一个例子：</li>
</ul>
<pre lang="javascript">
      $.expr[':'].external = function(elem,index,match) {
          var url = elem.href || elem.src, loc = window.location; 
              loc = window.location;
          return !!url.match(new RegExp('^' + loc.protocol + '//' + '(?!' + loc.hostname + ')' ));}; 
      }; 
      //现在您可以在您的选择器使用它： 
      //查找所有的外部链接：
      $('a:external');  
      //查找所有外部脚本元素：
      $('script:external');  
      //判断是否是外部链接：
      $('a#mylink').is(':external'); // true/false
</pre>
<ul>
    <li> 我看到不少人仍然在他们的jQuery脚本中使用JavaScript的FOR或者WHILE结构来创建循环。这样做没有什么不对，但请注意， jQuery的'each'方法也能够迭代数组和对象！</li>
</ul>
<pre lang="javascript">
    var myArr = ['apple','banana','orange'];  
      $.each(myArr, function(index, item) {
          //做些什么
          //返回False来终止循环
          //返回True来继续下一次循环
      });
</pre>
<ul>
    <li> '过滤器'方法接受一个字符串选择器或者一个函数。当和函数一起使用的时候，您必须返回false来从堆栈中删除这个元素，返回true来保留它：</li>
</ul>
<pre lang="javascript">
      $('div').filter(function(){
          return this.childNodes.length > 10; // 必须返回一个Boolean类型的值   
      });
</pre>
<ul>
    <li> 您没有必要为一个新的元素的指定ID或classes以便于以后对其进行引用，只需将他们缓存到一个变量就可以了：</li>
</ul>
<pre lang="javascript">
     var myInjectedDiv = $('<div>').appendTo('body'); </div></pre></p>

      //使用' myInjectedDiv '来引用这个元素：
      myInjectedDiv.bind('click', function(){
          // ...
      });
</pre>
<ul>
    <li> jQuery的'map'方法是非常有用的，参数中传递过来的函数将会对传递过来的数组（或对象）中的每一个元素进行操作，并且将每一次的函数返回值添加到新的数组中去，我们来看一看：</li>
</ul>
<pre lang="javascript">
      //创建一个包含所有锚点HREF属性的数组：
      var URLs = $.map($('a'), function(elem, index){
          return elem.href;
      });
       
      // URLs = ['http://google.com', 'http://whatever.com', 'http://yahoo.com']
</pre>
<ul>
    <li> 这一个不是jQuery相关的，但它是非常有用的。当您需要比较做一些工作的不同方法时（为了获得更好的性能）您可以使用Firebug控制台来记录每一段代码的执行时间，例如：</li>
</ul>
<pre lang="javascript">
      console.time('My first method');
      //做些什么...
      console.time('My first method'); 
      console.time('My second method');
      //做些别的事情...
      console.time('My second method');

      //Firebug会记录完成每块代码所用的时间（以毫秒为单位）
</pre>

]]></content>
  </entry>
  
</feed>
