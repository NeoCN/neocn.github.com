<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | DevX.Me]]></title>
  <link href="http://NeoCN.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://NeoCN.github.com/"/>
  <updated>2012-11-25T22:48:32+08:00</updated>
  <id>http://NeoCN.github.com/</id>
  <author>
    <name><![CDATA[小马]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[8个正则表达式图解]]></title>
    <link href="http://NeoCN.github.com/Java/8-regular-expressions-diagrammatic-explanation.html"/>
    <updated>2009-12-02T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/Java/8-regular-expressions-diagrammatic-explanation</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译]10个你应该知道的Java正则表达式的例子]]></title>
    <link href="http://NeoCN.github.com/Java/10-java-regular-expression-examples-you-should-know.html"/>
    <updated>2009-12-01T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/Java/10-java-regular-expression-examples-you-should-know</id>
    <content type="html"><![CDATA[<p>正则表达式，用于验证用户输入的合法性是非常方便的，正好在网上看到了这篇文章，顺手翻译一下。</p>




<p>原文链接：<a title="10 Java Regular Expression Examples You Should Know " href="http://www.mkyong.com/regular-expressions/10-java-regular-expression-examples-you-should-know/" target="_blank">http://www.mkyong.com/regular-expressions/10-java-regular-expression-examples-you-should-know/</a></p>




<p>声明：原创翻译，不足之处请多多指正，转载请注明出处！</p>




<p>正则表达式是一个编程的艺术，很难调试，学习和理解，但强大的功能，仍吸引不少开发者编写正则表达式。让我们探索一下下面10个实际应用中的正则表达式。
<h3><strong>1. 用户名正则表达式模式</strong></h3>
<pre>^[a-z0-9_-]{3,15}$</pre>
<pre>^                         # 行开始
  [a-z0-9_-]              # 匹配列表中的字符，a-z,0–9,下划线，连字符
            {3,15}        # 长度至少3个字符，最大长度为15
$                         # 行结束</pre>
<h3>2. 密码正则表达式模式</h3>
<pre>((?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})</pre>
<pre>(                        # 组开始
    (?=.*\d)             # 必须包含一个数字 0-9
    (?=.*[a-z])          # 必须包含一个小写字符
    (?=.*[A-Z])          # 必须包含一个大写字符
    (?=.*[@#$%])         # 必须包含一个列表中的特殊字符"@#$%"
                .        # 检查所有字符串与前面的条件的匹配
                 {6,20}  # 长度至少为6个字符，最大长度为20
)                        # 组结束</pre>
<h3><!--more-->3. 16进制颜色代码正则表达式模式</h3>
<pre>^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</pre>
<pre>^                       # 行开始
 #                      #   必须包含一个"#"符号
  (                     #   组#1开始
   [A-Fa-f0-9]{6}       #     列表中的任意字符串,长度为6
   |                    #     ..或者
   [A-Fa-f0-9]{3}       #     列表中的任意字符串,长度为3
  )                     #   组#1结束
$                       # 行结束</pre>
<h3>4. Email 正则表达式模式</h3>
<pre>^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$</pre>
<pre>^                            # 行开始
  [_A-Za-z0-9-]+             #   必须以中括号中的字符为起始字符[],必须包含一个或多个(+)
  (                          #   组#1开始
    \\.[_A-Za-z0-9-]+        #     接下来是一个点"."和中括号内的字符[],必须包含一个或者多个(+)
  )*                         #   组#1结束, 这个组是可选的(*)
    @                        #     必须包含一个"@"符号
     [A-Za-z0-9]+            #       接下来是中括号内的字符[],必须包含一个或者多个(+)
      (                      #         组 #2开始 – 一级TLD检查
       \\.[A-Za-z0-9]+       #           接下来是一个点"."和中括号内的字符[],必须包含一个或者多个(+)
      )*                     #         组#2结束,这个组是可选的(*)
      (                      #         组#3开始 – 二级TLD检查
       \\.[A-Za-z]{2,}       #           接下来是一个点"."和中括号内的字符[], 最小长度为2
      )                      #         组#3结束
$                            # 行结束</pre>
<h3>5. 图像文件扩展名正则表达式模式</h3>
<pre>([^\s]+(\.(?i)(jpg|png|gif|bmp))$)</pre>
<pre>(                         # 组#1开始
 [^\s]+                   #   必须包含一个或更多的任意字符(除了空格)
       (                  #     组#2开始
        \.                #       接下来是一个点"."
         (?i)             #       忽略后边字符的大小写检查
             (            #         组#3开始
              jpg         #           包含字符"jpg"
              |           #           ..或者
              png         #           包含字符"png"
              |           #           .. 或者
              gif         #           包含字符"gif"
              |           #           .. 或者
              bmp         #           包含字符"bmp"
             )            #         组#3结束
       )                  #     组#2结束
 $                        #   字符串的结束
)                         # 组#1结束</pre>
<h3>6. IP地址正则表达式模式</h3>
<pre>^([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.
([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.([01]?\\d\\d?|2[0-4]\\d|25[0-5])$</pre>
<pre>^                  # 行开始
 (                 #   组#1开始
  [01]?\\d\\d?     #     可以是1到2个数字. 如果出现3个数字, 必须以0或者1开始
                   #     例如 ([0-9], [0-9][0-9],[0-1][0-9][0-9])
    |              #     ...或者
  2[0-4]\\d        #     以2开始, 紧跟着是0-4，并且以任意数字结尾(2[0-4][0-9])
   |               #     ...或者
  25[0-5]          #     以2开始, 紧跟着是5，并且以0-5结尾 (25[0-5])
 )                 #   组#1结束
  \.               #   接下来是点"."
....               #   重复3次 (3x)
$                  # 行结束</pre>
<h3>7. 时间格式正则表达式模式</h3>
<h4>12-小时制时间正则表达式模式</h4>
<pre>(1[012]|[1-9]):[0-5][0-9](\\s)?(?i)(am|pm)</pre>
<pre>(                                  # 组#1开始
 1[012]                            #   以10, 11, 12开始
 |                                 #   或者
 [1-9]                             #   以1,2,...9开始
)                                  # 组#1结束
 :                                 #   接下来是一个冒号 (:)
  [0-5][0-9]                       #     接下来是0..5和0..9,意思是00到59
            (\\s)?                 #       接下来是一个空格(可选)
                  (?i)             #         下面的检查不区分大小写
                      (am|pm)      #           接下来是AM或者PM</pre>
<h4>24小时制时间正则表达式模式</h4>
<pre>([01]?[0-9]|2[0-3]):[0-5][0-9]</pre>
<pre>(                                  # 组#1开始
 [01]?[0-9]                        #   以0-9,1-9,00-09,10-19开始
 |                                 #   或者
 2[0-3]                            #   以20-23开始
)                                  # 组#1结束
 :                                 #   接下来是一个冒号(:)
  [0-5][0-9]                       #     接下来是0..5和0..9,意思是00到59</pre>
<h3>8. 日期格式 (dd/mm/yyyy) 正则表达式模式</h3>
<pre>(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)\\d\\d)</pre>
<pre>(                          # 组#1开始
 0?[1-9]                   #   01-09或者1-9
 |                         #   ..或者
 [12][0-9]                 #   10-19或者20-29
 |                         #   ..或者
 3[01]                     #   30, 31
)                          # 组#1结束
  /                        #   接下来是一个"/"
   (                       #     组#2开始
    0?[1-9]                #       01-09或者1-9
    |                      #       ..或者
    1[012]                 #       10,11,12
    )                      #     组#2结束
     /                     #       接下来是一个"/"
      (                    #         组#3开始
       (19|20)\\d\\d       #           19[0-9][0-9]或者20[0-9][0-9]
      )                    #         组#3结束</pre>
<h3>9. HTML标签正则表达式模式</h3>
<pre>&lt;("[^"]*"|'[^']*'|[^'"&gt;])*&gt;</pre>
<pre>&lt;                # 以"&lt;"标签开始
 (               #   组#1开始
  "[^"]*"        #     只允许两个双引号成对出现-"string"
  |              #     ..或者
  '[^']*'        #     只允许两个单引号成对出现- 'string'
  |              #     ..或者
  [^'"&gt;]         #     不能出现单独的双引号、单引号和"&gt;"
 )               #   组#1结束
 *               #   0次或多次
&gt;                # 以结束标签"&gt;"结束</pre>
<h3>10. HTML链接正则表达式模式</h3>
<h4>HTML中的A标签正则表达式模式</h4>
<pre>(?i)&lt;a([^&gt;]+)&gt;(.+?)&lt;/a&gt;</pre>
<pre>(              # 组#1开始
 ?i            #   所有的检查区分大小写
)              # 组#1结束
&lt;a             # 以"&lt;a"开始
  (            #   组#2开始
   [^&gt;]+       #     除了("&gt;")之外的任意字符,至少一个字符
  )            #   组#2结束
  &gt;            #     接下来是"&gt;"
   (.+?)       #       匹配所有
        &lt;/a&gt;   #         以"&lt;/a&gt;结束</pre>
<h4>提取HTML链接正则表达式模式</h4>
<pre>\s*(?i)href\s*=\s*(\"([^"]*\")|'[^']*'|([^'"&gt;\s]+));</pre>
<pre>\s*                          # 可以以空格开始
  (?i)                       #   所有的检查是区分大小写的
     href                    #     接下来是一个"href"字
        \s*=\s*              #       等号两边都允许空格,
              (              #         组#1开始
               "([^"]*")     #           只允许2个双引号成对出现 - "string"
               |             #           ..或者
               '[^']*'       #           只允许2个单引号成对出现 - 'string'
               |             #           ..或者
               ([^'"&gt;]+)     #           或者不允许出现单独的单引号、双引号和"&gt;"
               )             #         组#1结束</pre></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google App Engine 部署异常]]></title>
    <link href="http://NeoCN.github.com/Java/google-application-engine-deploy-exception.html"/>
    <updated>2009-09-07T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/Java/google-application-engine-deploy-exception</id>
    <content type="html"><![CDATA[<p>今天开始尝试着做Google Application Engine  应用程序开发（Java版），第一次部署还比较正常，除了在文件超过1M时频繁出现：java.net.SocketException: Unexpected end of file from server；</p>




<p>在了解了文件大小限制并成功部署之后，再次重新部署时，却出现如下异常，让人非常头疼：</p>




<p>Another transaction by user XXXXXX is already in progress for this app and major version. That user can undo the transaction with appcfg.py's "rollback" command.</p>




<p>解决办法如下：</p>




<p>从控制台进入Google App Engine的SDK目录下的bin目录，执行：“appcfg.cmd rollback  项目war目录路径”即可。</p>




<p>例如：</p>




<p>D:\eclipse\plugins\com.google.appengine.eclipse.sdkbundle_1.2.5.v200909021031\appengine-java-sdk-1.2.5\bin&gt;appcfg.cmd rollback D:\eclipse\workspace\XXXXXX\war</p>




<p>输出如下：</p>




<p>Reading application configuration data...<br />
Beginning server interaction for XXXXXX...<br />
0% Rolling back the update.<br />
Success.<br />
Cleaning up temporary files...</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IP地址与长整型互转]]></title>
    <link href="http://NeoCN.github.com/Java/ip-address-long-exchange.html"/>
    <updated>2009-07-19T00:00:00+08:00</updated>
    <id>http://NeoCN.github.com/Java/ip-address-long-exchange</id>
    <content type="html"><![CDATA[<p><pre lang="java" /></p>




<p>import java.net.InetAddress;<br />
import java.net.UnknownHostException;</p>




<p>public class IPUtil {<br />
 /**<br />
 * @param ip<br />
 *            ip的字符串表示<br />
 * @return ip地址的数值表示<br />
 * @throws UnknownHostException<br />
 */<br />
 public static long ipToLong(String ip) <br />
     throws UnknownHostException {<br />
     InetAddress ipAddress = InetAddress.getByName(ip);<br />
     return ipToLong(ipAddress);<br />
 }</p>




<p> /**<br />
 * IP地址转换到长整型<br />
 * @param ipAddress<br />
 *            InetAddress对象<br />
 * @return ip地址的数值表示<br />
 * @throws UnknownHostException<br />
 */<br />
 public static long ipToLong(InetAddress ipAddress) <br />
     throws UnknownHostException {<br />
     byte[] ipBytes = ipAddress.getAddress();<br />
     Long ipLong = (ipBytes[0] << 24 & 0xff000000L)<br />
                 | (ipBytes[1] << 16 & 0xff0000L)<br />
                 | (ipBytes[2] <<  8 & 0xff00L)<br />
                 | (ipBytes[3] <<  0 & 0xffL);<br />
     return ipLong;<br />
 }</p>

<p> /**<br />
 * 由低32位二进制数构成InetAddress对象<br />
 *<br />
 * @param ip<br />
 *            ip地址的数值表示<br />
 * @return InetAddress对象<br />
 * @throws UnknownHostException<br />
 */<br />
 public static InetAddress longToIP(long ip) <br />
     throws UnknownHostException {<br />
     byte[] ipBytes = new byte[4];<br />
     int i = (int) ip;// 低32位<br />
     ipBytes[0] = (byte) ((i >> 24) & 0x000000ff);<br />
     ipBytes[1] = (byte) ((i >> 16) & 0x000000ff);<br />
     ipBytes[2] = (byte) ((i >> 8 ) & 0x000000ff);<br />
     ipBytes[3] = (byte) ((i >> 0 ) & 0x000000ff);<br />
     return InetAddress.getByAddress(ipBytes);<br />
 }</p>

<p>}</p>

<p></p>

]]></content>
  </entry>
  
</feed>
